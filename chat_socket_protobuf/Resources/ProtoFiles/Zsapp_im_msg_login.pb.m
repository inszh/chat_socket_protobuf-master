// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Zsapp_im_msg_login.pb.h"
// @@protoc_insertion_point(imports)

@implementation ZsappImMsgLoginRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ZsappImMsgLoginRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface login_pw_request ()
@property SInt32 int32Uid;
@property (strong) NSString* strPhoneNum;
@property (strong) NSString* strEmail;
@property (strong) NSString* strValidateCode;
@property (strong) NSData* bytesValideBuff;
@property (strong) NSData* bytesDeviceToken;
@end

@implementation login_pw_request

- (BOOL) hasInt32Uid {
  return !!hasInt32Uid_;
}
- (void) setHasInt32Uid:(BOOL) _value_ {
  hasInt32Uid_ = !!_value_;
}
@synthesize int32Uid;
- (BOOL) hasStrPhoneNum {
  return !!hasStrPhoneNum_;
}
- (void) setHasStrPhoneNum:(BOOL) _value_ {
  hasStrPhoneNum_ = !!_value_;
}
@synthesize strPhoneNum;
- (BOOL) hasStrEmail {
  return !!hasStrEmail_;
}
- (void) setHasStrEmail:(BOOL) _value_ {
  hasStrEmail_ = !!_value_;
}
@synthesize strEmail;
- (BOOL) hasStrValidateCode {
  return !!hasStrValidateCode_;
}
- (void) setHasStrValidateCode:(BOOL) _value_ {
  hasStrValidateCode_ = !!_value_;
}
@synthesize strValidateCode;
- (BOOL) hasBytesValideBuff {
  return !!hasBytesValideBuff_;
}
- (void) setHasBytesValideBuff:(BOOL) _value_ {
  hasBytesValideBuff_ = !!_value_;
}
@synthesize bytesValideBuff;
- (BOOL) hasBytesDeviceToken {
  return !!hasBytesDeviceToken_;
}
- (void) setHasBytesDeviceToken:(BOOL) _value_ {
  hasBytesDeviceToken_ = !!_value_;
}
@synthesize bytesDeviceToken;
- (instancetype) init {
  if ((self = [super init])) {
    self.int32Uid = 0;
    self.strPhoneNum = @"";
    self.strEmail = @"";
    self.strValidateCode = @"";
    self.bytesValideBuff = [NSData data];
    self.bytesDeviceToken = [NSData data];
  }
  return self;
}
static login_pw_request* defaultlogin_pw_requestInstance = nil;
+ (void) initialize {
  if (self == [login_pw_request class]) {
    defaultlogin_pw_requestInstance = [[login_pw_request alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultlogin_pw_requestInstance;
}
- (instancetype) defaultInstance {
  return defaultlogin_pw_requestInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInt32Uid) {
    [output writeInt32:1 value:self.int32Uid];
  }
  if (self.hasStrPhoneNum) {
    [output writeString:2 value:self.strPhoneNum];
  }
  if (self.hasStrEmail) {
    [output writeString:3 value:self.strEmail];
  }
  if (self.hasStrValidateCode) {
    [output writeString:4 value:self.strValidateCode];
  }
  if (self.hasBytesValideBuff) {
    [output writeData:5 value:self.bytesValideBuff];
  }
  if (self.hasBytesDeviceToken) {
    [output writeData:6 value:self.bytesDeviceToken];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInt32Uid) {
    size_ += computeInt32Size(1, self.int32Uid);
  }
  if (self.hasStrPhoneNum) {
    size_ += computeStringSize(2, self.strPhoneNum);
  }
  if (self.hasStrEmail) {
    size_ += computeStringSize(3, self.strEmail);
  }
  if (self.hasStrValidateCode) {
    size_ += computeStringSize(4, self.strValidateCode);
  }
  if (self.hasBytesValideBuff) {
    size_ += computeDataSize(5, self.bytesValideBuff);
  }
  if (self.hasBytesDeviceToken) {
    size_ += computeDataSize(6, self.bytesDeviceToken);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (login_pw_request*) parseFromData:(NSData*) data {
  return (login_pw_request*)[[[login_pw_request builder] mergeFromData:data] build];
}
+ (login_pw_request*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (login_pw_request*)[[[login_pw_request builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (login_pw_request*) parseFromInputStream:(NSInputStream*) input {
  return (login_pw_request*)[[[login_pw_request builder] mergeFromInputStream:input] build];
}
+ (login_pw_request*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (login_pw_request*)[[[login_pw_request builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (login_pw_request*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (login_pw_request*)[[[login_pw_request builder] mergeFromCodedInputStream:input] build];
}
+ (login_pw_request*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (login_pw_request*)[[[login_pw_request builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (login_pw_requestBuilder*) builder {
  return [[login_pw_requestBuilder alloc] init];
}
+ (login_pw_requestBuilder*) builderWithPrototype:(login_pw_request*) prototype {
  return [[login_pw_request builder] mergeFrom:prototype];
}
- (login_pw_requestBuilder*) builder {
  return [login_pw_request builder];
}
- (login_pw_requestBuilder*) toBuilder {
  return [login_pw_request builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInt32Uid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32Uid", [NSNumber numberWithInteger:self.int32Uid]];
  }
  if (self.hasStrPhoneNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strPhoneNum", self.strPhoneNum];
  }
  if (self.hasStrEmail) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strEmail", self.strEmail];
  }
  if (self.hasStrValidateCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strValidateCode", self.strValidateCode];
  }
  if (self.hasBytesValideBuff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bytesValideBuff", self.bytesValideBuff];
  }
  if (self.hasBytesDeviceToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bytesDeviceToken", self.bytesDeviceToken];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasInt32Uid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32Uid] forKey: @"int32Uid"];
  }
  if (self.hasStrPhoneNum) {
    [dictionary setObject: self.strPhoneNum forKey: @"strPhoneNum"];
  }
  if (self.hasStrEmail) {
    [dictionary setObject: self.strEmail forKey: @"strEmail"];
  }
  if (self.hasStrValidateCode) {
    [dictionary setObject: self.strValidateCode forKey: @"strValidateCode"];
  }
  if (self.hasBytesValideBuff) {
    [dictionary setObject: self.bytesValideBuff forKey: @"bytesValideBuff"];
  }
  if (self.hasBytesDeviceToken) {
    [dictionary setObject: self.bytesDeviceToken forKey: @"bytesDeviceToken"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[login_pw_request class]]) {
    return NO;
  }
  login_pw_request *otherMessage = other;
  return
      self.hasInt32Uid == otherMessage.hasInt32Uid &&
      (!self.hasInt32Uid || self.int32Uid == otherMessage.int32Uid) &&
      self.hasStrPhoneNum == otherMessage.hasStrPhoneNum &&
      (!self.hasStrPhoneNum || [self.strPhoneNum isEqual:otherMessage.strPhoneNum]) &&
      self.hasStrEmail == otherMessage.hasStrEmail &&
      (!self.hasStrEmail || [self.strEmail isEqual:otherMessage.strEmail]) &&
      self.hasStrValidateCode == otherMessage.hasStrValidateCode &&
      (!self.hasStrValidateCode || [self.strValidateCode isEqual:otherMessage.strValidateCode]) &&
      self.hasBytesValideBuff == otherMessage.hasBytesValideBuff &&
      (!self.hasBytesValideBuff || [self.bytesValideBuff isEqual:otherMessage.bytesValideBuff]) &&
      self.hasBytesDeviceToken == otherMessage.hasBytesDeviceToken &&
      (!self.hasBytesDeviceToken || [self.bytesDeviceToken isEqual:otherMessage.bytesDeviceToken]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasInt32Uid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32Uid] hash];
  }
  if (self.hasStrPhoneNum) {
    hashCode = hashCode * 31 + [self.strPhoneNum hash];
  }
  if (self.hasStrEmail) {
    hashCode = hashCode * 31 + [self.strEmail hash];
  }
  if (self.hasStrValidateCode) {
    hashCode = hashCode * 31 + [self.strValidateCode hash];
  }
  if (self.hasBytesValideBuff) {
    hashCode = hashCode * 31 + [self.bytesValideBuff hash];
  }
  if (self.hasBytesDeviceToken) {
    hashCode = hashCode * 31 + [self.bytesDeviceToken hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface login_pw_requestBuilder()
@property (strong) login_pw_request* resultLoginPwRequest;
@end

@implementation login_pw_requestBuilder
@synthesize resultLoginPwRequest;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLoginPwRequest = [[login_pw_request alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLoginPwRequest;
}
- (login_pw_requestBuilder*) clear {
  self.resultLoginPwRequest = [[login_pw_request alloc] init];
  return self;
}
- (login_pw_requestBuilder*) clone {
  return [login_pw_request builderWithPrototype:resultLoginPwRequest];
}
- (login_pw_request*) defaultInstance {
  return [login_pw_request defaultInstance];
}
- (login_pw_request*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (login_pw_request*) buildPartial {
  login_pw_request* returnMe = resultLoginPwRequest;
  self.resultLoginPwRequest = nil;
  return returnMe;
}
- (login_pw_requestBuilder*) mergeFrom:(login_pw_request*) other {
  if (other == [login_pw_request defaultInstance]) {
    return self;
  }
  if (other.hasInt32Uid) {
    [self setInt32Uid:other.int32Uid];
  }
  if (other.hasStrPhoneNum) {
    [self setStrPhoneNum:other.strPhoneNum];
  }
  if (other.hasStrEmail) {
    [self setStrEmail:other.strEmail];
  }
  if (other.hasStrValidateCode) {
    [self setStrValidateCode:other.strValidateCode];
  }
  if (other.hasBytesValideBuff) {
    [self setBytesValideBuff:other.bytesValideBuff];
  }
  if (other.hasBytesDeviceToken) {
    [self setBytesDeviceToken:other.bytesDeviceToken];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (login_pw_requestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (login_pw_requestBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setInt32Uid:[input readInt32]];
        break;
      }
      case 18: {
        [self setStrPhoneNum:[input readString]];
        break;
      }
      case 26: {
        [self setStrEmail:[input readString]];
        break;
      }
      case 34: {
        [self setStrValidateCode:[input readString]];
        break;
      }
      case 42: {
        [self setBytesValideBuff:[input readData]];
        break;
      }
      case 50: {
        [self setBytesDeviceToken:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasInt32Uid {
  return resultLoginPwRequest.hasInt32Uid;
}
- (SInt32) int32Uid {
  return resultLoginPwRequest.int32Uid;
}
- (login_pw_requestBuilder*) setInt32Uid:(SInt32) value {
  resultLoginPwRequest.hasInt32Uid = YES;
  resultLoginPwRequest.int32Uid = value;
  return self;
}
- (login_pw_requestBuilder*) clearInt32Uid {
  resultLoginPwRequest.hasInt32Uid = NO;
  resultLoginPwRequest.int32Uid = 0;
  return self;
}
- (BOOL) hasStrPhoneNum {
  return resultLoginPwRequest.hasStrPhoneNum;
}
- (NSString*) strPhoneNum {
  return resultLoginPwRequest.strPhoneNum;
}
- (login_pw_requestBuilder*) setStrPhoneNum:(NSString*) value {
  resultLoginPwRequest.hasStrPhoneNum = YES;
  resultLoginPwRequest.strPhoneNum = value;
  return self;
}
- (login_pw_requestBuilder*) clearStrPhoneNum {
  resultLoginPwRequest.hasStrPhoneNum = NO;
  resultLoginPwRequest.strPhoneNum = @"";
  return self;
}
- (BOOL) hasStrEmail {
  return resultLoginPwRequest.hasStrEmail;
}
- (NSString*) strEmail {
  return resultLoginPwRequest.strEmail;
}
- (login_pw_requestBuilder*) setStrEmail:(NSString*) value {
  resultLoginPwRequest.hasStrEmail = YES;
  resultLoginPwRequest.strEmail = value;
  return self;
}
- (login_pw_requestBuilder*) clearStrEmail {
  resultLoginPwRequest.hasStrEmail = NO;
  resultLoginPwRequest.strEmail = @"";
  return self;
}
- (BOOL) hasStrValidateCode {
  return resultLoginPwRequest.hasStrValidateCode;
}
- (NSString*) strValidateCode {
  return resultLoginPwRequest.strValidateCode;
}
- (login_pw_requestBuilder*) setStrValidateCode:(NSString*) value {
  resultLoginPwRequest.hasStrValidateCode = YES;
  resultLoginPwRequest.strValidateCode = value;
  return self;
}
- (login_pw_requestBuilder*) clearStrValidateCode {
  resultLoginPwRequest.hasStrValidateCode = NO;
  resultLoginPwRequest.strValidateCode = @"";
  return self;
}
- (BOOL) hasBytesValideBuff {
  return resultLoginPwRequest.hasBytesValideBuff;
}
- (NSData*) bytesValideBuff {
  return resultLoginPwRequest.bytesValideBuff;
}
- (login_pw_requestBuilder*) setBytesValideBuff:(NSData*) value {
  resultLoginPwRequest.hasBytesValideBuff = YES;
  resultLoginPwRequest.bytesValideBuff = value;
  return self;
}
- (login_pw_requestBuilder*) clearBytesValideBuff {
  resultLoginPwRequest.hasBytesValideBuff = NO;
  resultLoginPwRequest.bytesValideBuff = [NSData data];
  return self;
}
- (BOOL) hasBytesDeviceToken {
  return resultLoginPwRequest.hasBytesDeviceToken;
}
- (NSData*) bytesDeviceToken {
  return resultLoginPwRequest.bytesDeviceToken;
}
- (login_pw_requestBuilder*) setBytesDeviceToken:(NSData*) value {
  resultLoginPwRequest.hasBytesDeviceToken = YES;
  resultLoginPwRequest.bytesDeviceToken = value;
  return self;
}
- (login_pw_requestBuilder*) clearBytesDeviceToken {
  resultLoginPwRequest.hasBytesDeviceToken = NO;
  resultLoginPwRequest.bytesDeviceToken = [NSData data];
  return self;
}
@end

@interface login_pw_rsp ()
@property SInt32 int32Uid;
@property SInt32 int32LoginResultCode;
@property (strong) NSString* strErrorMsg;
@property (strong) NSString* strCookieKey;
@property (strong) NSData* bytesCookieSig;
@property (strong) NSString* strDstIp;
@property (strong) NSString* strDstPort;
@end

@implementation login_pw_rsp

- (BOOL) hasInt32Uid {
  return !!hasInt32Uid_;
}
- (void) setHasInt32Uid:(BOOL) _value_ {
  hasInt32Uid_ = !!_value_;
}
@synthesize int32Uid;
- (BOOL) hasInt32LoginResultCode {
  return !!hasInt32LoginResultCode_;
}
- (void) setHasInt32LoginResultCode:(BOOL) _value_ {
  hasInt32LoginResultCode_ = !!_value_;
}
@synthesize int32LoginResultCode;
- (BOOL) hasStrErrorMsg {
  return !!hasStrErrorMsg_;
}
- (void) setHasStrErrorMsg:(BOOL) _value_ {
  hasStrErrorMsg_ = !!_value_;
}
@synthesize strErrorMsg;
- (BOOL) hasStrCookieKey {
  return !!hasStrCookieKey_;
}
- (void) setHasStrCookieKey:(BOOL) _value_ {
  hasStrCookieKey_ = !!_value_;
}
@synthesize strCookieKey;
- (BOOL) hasBytesCookieSig {
  return !!hasBytesCookieSig_;
}
- (void) setHasBytesCookieSig:(BOOL) _value_ {
  hasBytesCookieSig_ = !!_value_;
}
@synthesize bytesCookieSig;
- (BOOL) hasStrDstIp {
  return !!hasStrDstIp_;
}
- (void) setHasStrDstIp:(BOOL) _value_ {
  hasStrDstIp_ = !!_value_;
}
@synthesize strDstIp;
- (BOOL) hasStrDstPort {
  return !!hasStrDstPort_;
}
- (void) setHasStrDstPort:(BOOL) _value_ {
  hasStrDstPort_ = !!_value_;
}
@synthesize strDstPort;
- (instancetype) init {
  if ((self = [super init])) {
    self.int32Uid = 0;
    self.int32LoginResultCode = 0;
    self.strErrorMsg = @"";
    self.strCookieKey = @"";
    self.bytesCookieSig = [NSData data];
    self.strDstIp = @"";
    self.strDstPort = @"";
  }
  return self;
}
static login_pw_rsp* defaultlogin_pw_rspInstance = nil;
+ (void) initialize {
  if (self == [login_pw_rsp class]) {
    defaultlogin_pw_rspInstance = [[login_pw_rsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultlogin_pw_rspInstance;
}
- (instancetype) defaultInstance {
  return defaultlogin_pw_rspInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInt32Uid) {
    [output writeInt32:1 value:self.int32Uid];
  }
  if (self.hasInt32LoginResultCode) {
    [output writeInt32:2 value:self.int32LoginResultCode];
  }
  if (self.hasStrErrorMsg) {
    [output writeString:3 value:self.strErrorMsg];
  }
  if (self.hasStrCookieKey) {
    [output writeString:4 value:self.strCookieKey];
  }
  if (self.hasBytesCookieSig) {
    [output writeData:5 value:self.bytesCookieSig];
  }
  if (self.hasStrDstIp) {
    [output writeString:6 value:self.strDstIp];
  }
  if (self.hasStrDstPort) {
    [output writeString:7 value:self.strDstPort];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInt32Uid) {
    size_ += computeInt32Size(1, self.int32Uid);
  }
  if (self.hasInt32LoginResultCode) {
    size_ += computeInt32Size(2, self.int32LoginResultCode);
  }
  if (self.hasStrErrorMsg) {
    size_ += computeStringSize(3, self.strErrorMsg);
  }
  if (self.hasStrCookieKey) {
    size_ += computeStringSize(4, self.strCookieKey);
  }
  if (self.hasBytesCookieSig) {
    size_ += computeDataSize(5, self.bytesCookieSig);
  }
  if (self.hasStrDstIp) {
    size_ += computeStringSize(6, self.strDstIp);
  }
  if (self.hasStrDstPort) {
    size_ += computeStringSize(7, self.strDstPort);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (login_pw_rsp*) parseFromData:(NSData*) data {
  return (login_pw_rsp*)[[[login_pw_rsp builder] mergeFromData:data] build];
}
+ (login_pw_rsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (login_pw_rsp*)[[[login_pw_rsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (login_pw_rsp*) parseFromInputStream:(NSInputStream*) input {
  return (login_pw_rsp*)[[[login_pw_rsp builder] mergeFromInputStream:input] build];
}
+ (login_pw_rsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (login_pw_rsp*)[[[login_pw_rsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (login_pw_rsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (login_pw_rsp*)[[[login_pw_rsp builder] mergeFromCodedInputStream:input] build];
}
+ (login_pw_rsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (login_pw_rsp*)[[[login_pw_rsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (login_pw_rspBuilder*) builder {
  return [[login_pw_rspBuilder alloc] init];
}
+ (login_pw_rspBuilder*) builderWithPrototype:(login_pw_rsp*) prototype {
  return [[login_pw_rsp builder] mergeFrom:prototype];
}
- (login_pw_rspBuilder*) builder {
  return [login_pw_rsp builder];
}
- (login_pw_rspBuilder*) toBuilder {
  return [login_pw_rsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInt32Uid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32Uid", [NSNumber numberWithInteger:self.int32Uid]];
  }
  if (self.hasInt32LoginResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32LoginResultCode", [NSNumber numberWithInteger:self.int32LoginResultCode]];
  }
  if (self.hasStrErrorMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strErrorMsg", self.strErrorMsg];
  }
  if (self.hasStrCookieKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strCookieKey", self.strCookieKey];
  }
  if (self.hasBytesCookieSig) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bytesCookieSig", self.bytesCookieSig];
  }
  if (self.hasStrDstIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strDstIp", self.strDstIp];
  }
  if (self.hasStrDstPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strDstPort", self.strDstPort];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasInt32Uid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32Uid] forKey: @"int32Uid"];
  }
  if (self.hasInt32LoginResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32LoginResultCode] forKey: @"int32LoginResultCode"];
  }
  if (self.hasStrErrorMsg) {
    [dictionary setObject: self.strErrorMsg forKey: @"strErrorMsg"];
  }
  if (self.hasStrCookieKey) {
    [dictionary setObject: self.strCookieKey forKey: @"strCookieKey"];
  }
  if (self.hasBytesCookieSig) {
    [dictionary setObject: self.bytesCookieSig forKey: @"bytesCookieSig"];
  }
  if (self.hasStrDstIp) {
    [dictionary setObject: self.strDstIp forKey: @"strDstIp"];
  }
  if (self.hasStrDstPort) {
    [dictionary setObject: self.strDstPort forKey: @"strDstPort"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[login_pw_rsp class]]) {
    return NO;
  }
  login_pw_rsp *otherMessage = other;
  return
      self.hasInt32Uid == otherMessage.hasInt32Uid &&
      (!self.hasInt32Uid || self.int32Uid == otherMessage.int32Uid) &&
      self.hasInt32LoginResultCode == otherMessage.hasInt32LoginResultCode &&
      (!self.hasInt32LoginResultCode || self.int32LoginResultCode == otherMessage.int32LoginResultCode) &&
      self.hasStrErrorMsg == otherMessage.hasStrErrorMsg &&
      (!self.hasStrErrorMsg || [self.strErrorMsg isEqual:otherMessage.strErrorMsg]) &&
      self.hasStrCookieKey == otherMessage.hasStrCookieKey &&
      (!self.hasStrCookieKey || [self.strCookieKey isEqual:otherMessage.strCookieKey]) &&
      self.hasBytesCookieSig == otherMessage.hasBytesCookieSig &&
      (!self.hasBytesCookieSig || [self.bytesCookieSig isEqual:otherMessage.bytesCookieSig]) &&
      self.hasStrDstIp == otherMessage.hasStrDstIp &&
      (!self.hasStrDstIp || [self.strDstIp isEqual:otherMessage.strDstIp]) &&
      self.hasStrDstPort == otherMessage.hasStrDstPort &&
      (!self.hasStrDstPort || [self.strDstPort isEqual:otherMessage.strDstPort]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasInt32Uid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32Uid] hash];
  }
  if (self.hasInt32LoginResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32LoginResultCode] hash];
  }
  if (self.hasStrErrorMsg) {
    hashCode = hashCode * 31 + [self.strErrorMsg hash];
  }
  if (self.hasStrCookieKey) {
    hashCode = hashCode * 31 + [self.strCookieKey hash];
  }
  if (self.hasBytesCookieSig) {
    hashCode = hashCode * 31 + [self.bytesCookieSig hash];
  }
  if (self.hasStrDstIp) {
    hashCode = hashCode * 31 + [self.strDstIp hash];
  }
  if (self.hasStrDstPort) {
    hashCode = hashCode * 31 + [self.strDstPort hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface login_pw_rspBuilder()
@property (strong) login_pw_rsp* resultLoginPwRsp;
@end

@implementation login_pw_rspBuilder
@synthesize resultLoginPwRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLoginPwRsp = [[login_pw_rsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLoginPwRsp;
}
- (login_pw_rspBuilder*) clear {
  self.resultLoginPwRsp = [[login_pw_rsp alloc] init];
  return self;
}
- (login_pw_rspBuilder*) clone {
  return [login_pw_rsp builderWithPrototype:resultLoginPwRsp];
}
- (login_pw_rsp*) defaultInstance {
  return [login_pw_rsp defaultInstance];
}
- (login_pw_rsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (login_pw_rsp*) buildPartial {
  login_pw_rsp* returnMe = resultLoginPwRsp;
  self.resultLoginPwRsp = nil;
  return returnMe;
}
- (login_pw_rspBuilder*) mergeFrom:(login_pw_rsp*) other {
  if (other == [login_pw_rsp defaultInstance]) {
    return self;
  }
  if (other.hasInt32Uid) {
    [self setInt32Uid:other.int32Uid];
  }
  if (other.hasInt32LoginResultCode) {
    [self setInt32LoginResultCode:other.int32LoginResultCode];
  }
  if (other.hasStrErrorMsg) {
    [self setStrErrorMsg:other.strErrorMsg];
  }
  if (other.hasStrCookieKey) {
    [self setStrCookieKey:other.strCookieKey];
  }
  if (other.hasBytesCookieSig) {
    [self setBytesCookieSig:other.bytesCookieSig];
  }
  if (other.hasStrDstIp) {
    [self setStrDstIp:other.strDstIp];
  }
  if (other.hasStrDstPort) {
    [self setStrDstPort:other.strDstPort];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (login_pw_rspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (login_pw_rspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setInt32Uid:[input readInt32]];
        break;
      }
      case 16: {
        [self setInt32LoginResultCode:[input readInt32]];
        break;
      }
      case 26: {
        [self setStrErrorMsg:[input readString]];
        break;
      }
      case 34: {
        [self setStrCookieKey:[input readString]];
        break;
      }
      case 42: {
        [self setBytesCookieSig:[input readData]];
        break;
      }
      case 50: {
        [self setStrDstIp:[input readString]];
        break;
      }
      case 58: {
        [self setStrDstPort:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasInt32Uid {
  return resultLoginPwRsp.hasInt32Uid;
}
- (SInt32) int32Uid {
  return resultLoginPwRsp.int32Uid;
}
- (login_pw_rspBuilder*) setInt32Uid:(SInt32) value {
  resultLoginPwRsp.hasInt32Uid = YES;
  resultLoginPwRsp.int32Uid = value;
  return self;
}
- (login_pw_rspBuilder*) clearInt32Uid {
  resultLoginPwRsp.hasInt32Uid = NO;
  resultLoginPwRsp.int32Uid = 0;
  return self;
}
- (BOOL) hasInt32LoginResultCode {
  return resultLoginPwRsp.hasInt32LoginResultCode;
}
- (SInt32) int32LoginResultCode {
  return resultLoginPwRsp.int32LoginResultCode;
}
- (login_pw_rspBuilder*) setInt32LoginResultCode:(SInt32) value {
  resultLoginPwRsp.hasInt32LoginResultCode = YES;
  resultLoginPwRsp.int32LoginResultCode = value;
  return self;
}
- (login_pw_rspBuilder*) clearInt32LoginResultCode {
  resultLoginPwRsp.hasInt32LoginResultCode = NO;
  resultLoginPwRsp.int32LoginResultCode = 0;
  return self;
}
- (BOOL) hasStrErrorMsg {
  return resultLoginPwRsp.hasStrErrorMsg;
}
- (NSString*) strErrorMsg {
  return resultLoginPwRsp.strErrorMsg;
}
- (login_pw_rspBuilder*) setStrErrorMsg:(NSString*) value {
  resultLoginPwRsp.hasStrErrorMsg = YES;
  resultLoginPwRsp.strErrorMsg = value;
  return self;
}
- (login_pw_rspBuilder*) clearStrErrorMsg {
  resultLoginPwRsp.hasStrErrorMsg = NO;
  resultLoginPwRsp.strErrorMsg = @"";
  return self;
}
- (BOOL) hasStrCookieKey {
  return resultLoginPwRsp.hasStrCookieKey;
}
- (NSString*) strCookieKey {
  return resultLoginPwRsp.strCookieKey;
}
- (login_pw_rspBuilder*) setStrCookieKey:(NSString*) value {
  resultLoginPwRsp.hasStrCookieKey = YES;
  resultLoginPwRsp.strCookieKey = value;
  return self;
}
- (login_pw_rspBuilder*) clearStrCookieKey {
  resultLoginPwRsp.hasStrCookieKey = NO;
  resultLoginPwRsp.strCookieKey = @"";
  return self;
}
- (BOOL) hasBytesCookieSig {
  return resultLoginPwRsp.hasBytesCookieSig;
}
- (NSData*) bytesCookieSig {
  return resultLoginPwRsp.bytesCookieSig;
}
- (login_pw_rspBuilder*) setBytesCookieSig:(NSData*) value {
  resultLoginPwRsp.hasBytesCookieSig = YES;
  resultLoginPwRsp.bytesCookieSig = value;
  return self;
}
- (login_pw_rspBuilder*) clearBytesCookieSig {
  resultLoginPwRsp.hasBytesCookieSig = NO;
  resultLoginPwRsp.bytesCookieSig = [NSData data];
  return self;
}
- (BOOL) hasStrDstIp {
  return resultLoginPwRsp.hasStrDstIp;
}
- (NSString*) strDstIp {
  return resultLoginPwRsp.strDstIp;
}
- (login_pw_rspBuilder*) setStrDstIp:(NSString*) value {
  resultLoginPwRsp.hasStrDstIp = YES;
  resultLoginPwRsp.strDstIp = value;
  return self;
}
- (login_pw_rspBuilder*) clearStrDstIp {
  resultLoginPwRsp.hasStrDstIp = NO;
  resultLoginPwRsp.strDstIp = @"";
  return self;
}
- (BOOL) hasStrDstPort {
  return resultLoginPwRsp.hasStrDstPort;
}
- (NSString*) strDstPort {
  return resultLoginPwRsp.strDstPort;
}
- (login_pw_rspBuilder*) setStrDstPort:(NSString*) value {
  resultLoginPwRsp.hasStrDstPort = YES;
  resultLoginPwRsp.strDstPort = value;
  return self;
}
- (login_pw_rspBuilder*) clearStrDstPort {
  resultLoginPwRsp.hasStrDstPort = NO;
  resultLoginPwRsp.strDstPort = @"";
  return self;
}
@end

@interface cookie_login_req ()
@property SInt32 int32Uid;
@property (strong) NSData* bytesCookieSig;
@property (strong) NSString* strValidateCode;
@property (strong) NSData* bytesValidateCodeBuff;
@property (strong) NSData* bytesDeviceToken;
@end

@implementation cookie_login_req

- (BOOL) hasInt32Uid {
  return !!hasInt32Uid_;
}
- (void) setHasInt32Uid:(BOOL) _value_ {
  hasInt32Uid_ = !!_value_;
}
@synthesize int32Uid;
- (BOOL) hasBytesCookieSig {
  return !!hasBytesCookieSig_;
}
- (void) setHasBytesCookieSig:(BOOL) _value_ {
  hasBytesCookieSig_ = !!_value_;
}
@synthesize bytesCookieSig;
- (BOOL) hasStrValidateCode {
  return !!hasStrValidateCode_;
}
- (void) setHasStrValidateCode:(BOOL) _value_ {
  hasStrValidateCode_ = !!_value_;
}
@synthesize strValidateCode;
- (BOOL) hasBytesValidateCodeBuff {
  return !!hasBytesValidateCodeBuff_;
}
- (void) setHasBytesValidateCodeBuff:(BOOL) _value_ {
  hasBytesValidateCodeBuff_ = !!_value_;
}
@synthesize bytesValidateCodeBuff;
- (BOOL) hasBytesDeviceToken {
  return !!hasBytesDeviceToken_;
}
- (void) setHasBytesDeviceToken:(BOOL) _value_ {
  hasBytesDeviceToken_ = !!_value_;
}
@synthesize bytesDeviceToken;
- (instancetype) init {
  if ((self = [super init])) {
    self.int32Uid = 0;
    self.bytesCookieSig = [NSData data];
    self.strValidateCode = @"";
    self.bytesValidateCodeBuff = [NSData data];
    self.bytesDeviceToken = [NSData data];
  }
  return self;
}
static cookie_login_req* defaultcookie_login_reqInstance = nil;
+ (void) initialize {
  if (self == [cookie_login_req class]) {
    defaultcookie_login_reqInstance = [[cookie_login_req alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultcookie_login_reqInstance;
}
- (instancetype) defaultInstance {
  return defaultcookie_login_reqInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInt32Uid) {
    [output writeInt32:1 value:self.int32Uid];
  }
  if (self.hasBytesCookieSig) {
    [output writeData:2 value:self.bytesCookieSig];
  }
  if (self.hasStrValidateCode) {
    [output writeString:3 value:self.strValidateCode];
  }
  if (self.hasBytesValidateCodeBuff) {
    [output writeData:4 value:self.bytesValidateCodeBuff];
  }
  if (self.hasBytesDeviceToken) {
    [output writeData:5 value:self.bytesDeviceToken];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInt32Uid) {
    size_ += computeInt32Size(1, self.int32Uid);
  }
  if (self.hasBytesCookieSig) {
    size_ += computeDataSize(2, self.bytesCookieSig);
  }
  if (self.hasStrValidateCode) {
    size_ += computeStringSize(3, self.strValidateCode);
  }
  if (self.hasBytesValidateCodeBuff) {
    size_ += computeDataSize(4, self.bytesValidateCodeBuff);
  }
  if (self.hasBytesDeviceToken) {
    size_ += computeDataSize(5, self.bytesDeviceToken);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (cookie_login_req*) parseFromData:(NSData*) data {
  return (cookie_login_req*)[[[cookie_login_req builder] mergeFromData:data] build];
}
+ (cookie_login_req*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (cookie_login_req*)[[[cookie_login_req builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (cookie_login_req*) parseFromInputStream:(NSInputStream*) input {
  return (cookie_login_req*)[[[cookie_login_req builder] mergeFromInputStream:input] build];
}
+ (cookie_login_req*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (cookie_login_req*)[[[cookie_login_req builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (cookie_login_req*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (cookie_login_req*)[[[cookie_login_req builder] mergeFromCodedInputStream:input] build];
}
+ (cookie_login_req*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (cookie_login_req*)[[[cookie_login_req builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (cookie_login_reqBuilder*) builder {
  return [[cookie_login_reqBuilder alloc] init];
}
+ (cookie_login_reqBuilder*) builderWithPrototype:(cookie_login_req*) prototype {
  return [[cookie_login_req builder] mergeFrom:prototype];
}
- (cookie_login_reqBuilder*) builder {
  return [cookie_login_req builder];
}
- (cookie_login_reqBuilder*) toBuilder {
  return [cookie_login_req builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInt32Uid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32Uid", [NSNumber numberWithInteger:self.int32Uid]];
  }
  if (self.hasBytesCookieSig) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bytesCookieSig", self.bytesCookieSig];
  }
  if (self.hasStrValidateCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strValidateCode", self.strValidateCode];
  }
  if (self.hasBytesValidateCodeBuff) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bytesValidateCodeBuff", self.bytesValidateCodeBuff];
  }
  if (self.hasBytesDeviceToken) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bytesDeviceToken", self.bytesDeviceToken];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasInt32Uid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32Uid] forKey: @"int32Uid"];
  }
  if (self.hasBytesCookieSig) {
    [dictionary setObject: self.bytesCookieSig forKey: @"bytesCookieSig"];
  }
  if (self.hasStrValidateCode) {
    [dictionary setObject: self.strValidateCode forKey: @"strValidateCode"];
  }
  if (self.hasBytesValidateCodeBuff) {
    [dictionary setObject: self.bytesValidateCodeBuff forKey: @"bytesValidateCodeBuff"];
  }
  if (self.hasBytesDeviceToken) {
    [dictionary setObject: self.bytesDeviceToken forKey: @"bytesDeviceToken"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[cookie_login_req class]]) {
    return NO;
  }
  cookie_login_req *otherMessage = other;
  return
      self.hasInt32Uid == otherMessage.hasInt32Uid &&
      (!self.hasInt32Uid || self.int32Uid == otherMessage.int32Uid) &&
      self.hasBytesCookieSig == otherMessage.hasBytesCookieSig &&
      (!self.hasBytesCookieSig || [self.bytesCookieSig isEqual:otherMessage.bytesCookieSig]) &&
      self.hasStrValidateCode == otherMessage.hasStrValidateCode &&
      (!self.hasStrValidateCode || [self.strValidateCode isEqual:otherMessage.strValidateCode]) &&
      self.hasBytesValidateCodeBuff == otherMessage.hasBytesValidateCodeBuff &&
      (!self.hasBytesValidateCodeBuff || [self.bytesValidateCodeBuff isEqual:otherMessage.bytesValidateCodeBuff]) &&
      self.hasBytesDeviceToken == otherMessage.hasBytesDeviceToken &&
      (!self.hasBytesDeviceToken || [self.bytesDeviceToken isEqual:otherMessage.bytesDeviceToken]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasInt32Uid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32Uid] hash];
  }
  if (self.hasBytesCookieSig) {
    hashCode = hashCode * 31 + [self.bytesCookieSig hash];
  }
  if (self.hasStrValidateCode) {
    hashCode = hashCode * 31 + [self.strValidateCode hash];
  }
  if (self.hasBytesValidateCodeBuff) {
    hashCode = hashCode * 31 + [self.bytesValidateCodeBuff hash];
  }
  if (self.hasBytesDeviceToken) {
    hashCode = hashCode * 31 + [self.bytesDeviceToken hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface cookie_login_reqBuilder()
@property (strong) cookie_login_req* resultCookieLoginReq;
@end

@implementation cookie_login_reqBuilder
@synthesize resultCookieLoginReq;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCookieLoginReq = [[cookie_login_req alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCookieLoginReq;
}
- (cookie_login_reqBuilder*) clear {
  self.resultCookieLoginReq = [[cookie_login_req alloc] init];
  return self;
}
- (cookie_login_reqBuilder*) clone {
  return [cookie_login_req builderWithPrototype:resultCookieLoginReq];
}
- (cookie_login_req*) defaultInstance {
  return [cookie_login_req defaultInstance];
}
- (cookie_login_req*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (cookie_login_req*) buildPartial {
  cookie_login_req* returnMe = resultCookieLoginReq;
  self.resultCookieLoginReq = nil;
  return returnMe;
}
- (cookie_login_reqBuilder*) mergeFrom:(cookie_login_req*) other {
  if (other == [cookie_login_req defaultInstance]) {
    return self;
  }
  if (other.hasInt32Uid) {
    [self setInt32Uid:other.int32Uid];
  }
  if (other.hasBytesCookieSig) {
    [self setBytesCookieSig:other.bytesCookieSig];
  }
  if (other.hasStrValidateCode) {
    [self setStrValidateCode:other.strValidateCode];
  }
  if (other.hasBytesValidateCodeBuff) {
    [self setBytesValidateCodeBuff:other.bytesValidateCodeBuff];
  }
  if (other.hasBytesDeviceToken) {
    [self setBytesDeviceToken:other.bytesDeviceToken];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (cookie_login_reqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (cookie_login_reqBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setInt32Uid:[input readInt32]];
        break;
      }
      case 18: {
        [self setBytesCookieSig:[input readData]];
        break;
      }
      case 26: {
        [self setStrValidateCode:[input readString]];
        break;
      }
      case 34: {
        [self setBytesValidateCodeBuff:[input readData]];
        break;
      }
      case 42: {
        [self setBytesDeviceToken:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasInt32Uid {
  return resultCookieLoginReq.hasInt32Uid;
}
- (SInt32) int32Uid {
  return resultCookieLoginReq.int32Uid;
}
- (cookie_login_reqBuilder*) setInt32Uid:(SInt32) value {
  resultCookieLoginReq.hasInt32Uid = YES;
  resultCookieLoginReq.int32Uid = value;
  return self;
}
- (cookie_login_reqBuilder*) clearInt32Uid {
  resultCookieLoginReq.hasInt32Uid = NO;
  resultCookieLoginReq.int32Uid = 0;
  return self;
}
- (BOOL) hasBytesCookieSig {
  return resultCookieLoginReq.hasBytesCookieSig;
}
- (NSData*) bytesCookieSig {
  return resultCookieLoginReq.bytesCookieSig;
}
- (cookie_login_reqBuilder*) setBytesCookieSig:(NSData*) value {
  resultCookieLoginReq.hasBytesCookieSig = YES;
  resultCookieLoginReq.bytesCookieSig = value;
  return self;
}
- (cookie_login_reqBuilder*) clearBytesCookieSig {
  resultCookieLoginReq.hasBytesCookieSig = NO;
  resultCookieLoginReq.bytesCookieSig = [NSData data];
  return self;
}
- (BOOL) hasStrValidateCode {
  return resultCookieLoginReq.hasStrValidateCode;
}
- (NSString*) strValidateCode {
  return resultCookieLoginReq.strValidateCode;
}
- (cookie_login_reqBuilder*) setStrValidateCode:(NSString*) value {
  resultCookieLoginReq.hasStrValidateCode = YES;
  resultCookieLoginReq.strValidateCode = value;
  return self;
}
- (cookie_login_reqBuilder*) clearStrValidateCode {
  resultCookieLoginReq.hasStrValidateCode = NO;
  resultCookieLoginReq.strValidateCode = @"";
  return self;
}
- (BOOL) hasBytesValidateCodeBuff {
  return resultCookieLoginReq.hasBytesValidateCodeBuff;
}
- (NSData*) bytesValidateCodeBuff {
  return resultCookieLoginReq.bytesValidateCodeBuff;
}
- (cookie_login_reqBuilder*) setBytesValidateCodeBuff:(NSData*) value {
  resultCookieLoginReq.hasBytesValidateCodeBuff = YES;
  resultCookieLoginReq.bytesValidateCodeBuff = value;
  return self;
}
- (cookie_login_reqBuilder*) clearBytesValidateCodeBuff {
  resultCookieLoginReq.hasBytesValidateCodeBuff = NO;
  resultCookieLoginReq.bytesValidateCodeBuff = [NSData data];
  return self;
}
- (BOOL) hasBytesDeviceToken {
  return resultCookieLoginReq.hasBytesDeviceToken;
}
- (NSData*) bytesDeviceToken {
  return resultCookieLoginReq.bytesDeviceToken;
}
- (cookie_login_reqBuilder*) setBytesDeviceToken:(NSData*) value {
  resultCookieLoginReq.hasBytesDeviceToken = YES;
  resultCookieLoginReq.bytesDeviceToken = value;
  return self;
}
- (cookie_login_reqBuilder*) clearBytesDeviceToken {
  resultCookieLoginReq.hasBytesDeviceToken = NO;
  resultCookieLoginReq.bytesDeviceToken = [NSData data];
  return self;
}
@end

@interface cookie_login_rsp ()
@property SInt32 int32Uid;
@property SInt32 int32CookieLoginResultCode;
@property (strong) NSString* strErrorMsg;
@property (strong) NSString* strDstIp;
@property (strong) NSString* strDstPort;
@end

@implementation cookie_login_rsp

- (BOOL) hasInt32Uid {
  return !!hasInt32Uid_;
}
- (void) setHasInt32Uid:(BOOL) _value_ {
  hasInt32Uid_ = !!_value_;
}
@synthesize int32Uid;
- (BOOL) hasInt32CookieLoginResultCode {
  return !!hasInt32CookieLoginResultCode_;
}
- (void) setHasInt32CookieLoginResultCode:(BOOL) _value_ {
  hasInt32CookieLoginResultCode_ = !!_value_;
}
@synthesize int32CookieLoginResultCode;
- (BOOL) hasStrErrorMsg {
  return !!hasStrErrorMsg_;
}
- (void) setHasStrErrorMsg:(BOOL) _value_ {
  hasStrErrorMsg_ = !!_value_;
}
@synthesize strErrorMsg;
- (BOOL) hasStrDstIp {
  return !!hasStrDstIp_;
}
- (void) setHasStrDstIp:(BOOL) _value_ {
  hasStrDstIp_ = !!_value_;
}
@synthesize strDstIp;
- (BOOL) hasStrDstPort {
  return !!hasStrDstPort_;
}
- (void) setHasStrDstPort:(BOOL) _value_ {
  hasStrDstPort_ = !!_value_;
}
@synthesize strDstPort;
- (instancetype) init {
  if ((self = [super init])) {
    self.int32Uid = 0;
    self.int32CookieLoginResultCode = 0;
    self.strErrorMsg = @"";
    self.strDstIp = @"";
    self.strDstPort = @"";
  }
  return self;
}
static cookie_login_rsp* defaultcookie_login_rspInstance = nil;
+ (void) initialize {
  if (self == [cookie_login_rsp class]) {
    defaultcookie_login_rspInstance = [[cookie_login_rsp alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultcookie_login_rspInstance;
}
- (instancetype) defaultInstance {
  return defaultcookie_login_rspInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInt32Uid) {
    [output writeInt32:1 value:self.int32Uid];
  }
  if (self.hasInt32CookieLoginResultCode) {
    [output writeInt32:2 value:self.int32CookieLoginResultCode];
  }
  if (self.hasStrErrorMsg) {
    [output writeString:3 value:self.strErrorMsg];
  }
  if (self.hasStrDstIp) {
    [output writeString:4 value:self.strDstIp];
  }
  if (self.hasStrDstPort) {
    [output writeString:5 value:self.strDstPort];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInt32Uid) {
    size_ += computeInt32Size(1, self.int32Uid);
  }
  if (self.hasInt32CookieLoginResultCode) {
    size_ += computeInt32Size(2, self.int32CookieLoginResultCode);
  }
  if (self.hasStrErrorMsg) {
    size_ += computeStringSize(3, self.strErrorMsg);
  }
  if (self.hasStrDstIp) {
    size_ += computeStringSize(4, self.strDstIp);
  }
  if (self.hasStrDstPort) {
    size_ += computeStringSize(5, self.strDstPort);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (cookie_login_rsp*) parseFromData:(NSData*) data {
  return (cookie_login_rsp*)[[[cookie_login_rsp builder] mergeFromData:data] build];
}
+ (cookie_login_rsp*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (cookie_login_rsp*)[[[cookie_login_rsp builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (cookie_login_rsp*) parseFromInputStream:(NSInputStream*) input {
  return (cookie_login_rsp*)[[[cookie_login_rsp builder] mergeFromInputStream:input] build];
}
+ (cookie_login_rsp*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (cookie_login_rsp*)[[[cookie_login_rsp builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (cookie_login_rsp*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (cookie_login_rsp*)[[[cookie_login_rsp builder] mergeFromCodedInputStream:input] build];
}
+ (cookie_login_rsp*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (cookie_login_rsp*)[[[cookie_login_rsp builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (cookie_login_rspBuilder*) builder {
  return [[cookie_login_rspBuilder alloc] init];
}
+ (cookie_login_rspBuilder*) builderWithPrototype:(cookie_login_rsp*) prototype {
  return [[cookie_login_rsp builder] mergeFrom:prototype];
}
- (cookie_login_rspBuilder*) builder {
  return [cookie_login_rsp builder];
}
- (cookie_login_rspBuilder*) toBuilder {
  return [cookie_login_rsp builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInt32Uid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32Uid", [NSNumber numberWithInteger:self.int32Uid]];
  }
  if (self.hasInt32CookieLoginResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32CookieLoginResultCode", [NSNumber numberWithInteger:self.int32CookieLoginResultCode]];
  }
  if (self.hasStrErrorMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strErrorMsg", self.strErrorMsg];
  }
  if (self.hasStrDstIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strDstIp", self.strDstIp];
  }
  if (self.hasStrDstPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strDstPort", self.strDstPort];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasInt32Uid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32Uid] forKey: @"int32Uid"];
  }
  if (self.hasInt32CookieLoginResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32CookieLoginResultCode] forKey: @"int32CookieLoginResultCode"];
  }
  if (self.hasStrErrorMsg) {
    [dictionary setObject: self.strErrorMsg forKey: @"strErrorMsg"];
  }
  if (self.hasStrDstIp) {
    [dictionary setObject: self.strDstIp forKey: @"strDstIp"];
  }
  if (self.hasStrDstPort) {
    [dictionary setObject: self.strDstPort forKey: @"strDstPort"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[cookie_login_rsp class]]) {
    return NO;
  }
  cookie_login_rsp *otherMessage = other;
  return
      self.hasInt32Uid == otherMessage.hasInt32Uid &&
      (!self.hasInt32Uid || self.int32Uid == otherMessage.int32Uid) &&
      self.hasInt32CookieLoginResultCode == otherMessage.hasInt32CookieLoginResultCode &&
      (!self.hasInt32CookieLoginResultCode || self.int32CookieLoginResultCode == otherMessage.int32CookieLoginResultCode) &&
      self.hasStrErrorMsg == otherMessage.hasStrErrorMsg &&
      (!self.hasStrErrorMsg || [self.strErrorMsg isEqual:otherMessage.strErrorMsg]) &&
      self.hasStrDstIp == otherMessage.hasStrDstIp &&
      (!self.hasStrDstIp || [self.strDstIp isEqual:otherMessage.strDstIp]) &&
      self.hasStrDstPort == otherMessage.hasStrDstPort &&
      (!self.hasStrDstPort || [self.strDstPort isEqual:otherMessage.strDstPort]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasInt32Uid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32Uid] hash];
  }
  if (self.hasInt32CookieLoginResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32CookieLoginResultCode] hash];
  }
  if (self.hasStrErrorMsg) {
    hashCode = hashCode * 31 + [self.strErrorMsg hash];
  }
  if (self.hasStrDstIp) {
    hashCode = hashCode * 31 + [self.strDstIp hash];
  }
  if (self.hasStrDstPort) {
    hashCode = hashCode * 31 + [self.strDstPort hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface cookie_login_rspBuilder()
@property (strong) cookie_login_rsp* resultCookieLoginRsp;
@end

@implementation cookie_login_rspBuilder
@synthesize resultCookieLoginRsp;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCookieLoginRsp = [[cookie_login_rsp alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCookieLoginRsp;
}
- (cookie_login_rspBuilder*) clear {
  self.resultCookieLoginRsp = [[cookie_login_rsp alloc] init];
  return self;
}
- (cookie_login_rspBuilder*) clone {
  return [cookie_login_rsp builderWithPrototype:resultCookieLoginRsp];
}
- (cookie_login_rsp*) defaultInstance {
  return [cookie_login_rsp defaultInstance];
}
- (cookie_login_rsp*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (cookie_login_rsp*) buildPartial {
  cookie_login_rsp* returnMe = resultCookieLoginRsp;
  self.resultCookieLoginRsp = nil;
  return returnMe;
}
- (cookie_login_rspBuilder*) mergeFrom:(cookie_login_rsp*) other {
  if (other == [cookie_login_rsp defaultInstance]) {
    return self;
  }
  if (other.hasInt32Uid) {
    [self setInt32Uid:other.int32Uid];
  }
  if (other.hasInt32CookieLoginResultCode) {
    [self setInt32CookieLoginResultCode:other.int32CookieLoginResultCode];
  }
  if (other.hasStrErrorMsg) {
    [self setStrErrorMsg:other.strErrorMsg];
  }
  if (other.hasStrDstIp) {
    [self setStrDstIp:other.strDstIp];
  }
  if (other.hasStrDstPort) {
    [self setStrDstPort:other.strDstPort];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (cookie_login_rspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (cookie_login_rspBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setInt32Uid:[input readInt32]];
        break;
      }
      case 16: {
        [self setInt32CookieLoginResultCode:[input readInt32]];
        break;
      }
      case 26: {
        [self setStrErrorMsg:[input readString]];
        break;
      }
      case 34: {
        [self setStrDstIp:[input readString]];
        break;
      }
      case 42: {
        [self setStrDstPort:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasInt32Uid {
  return resultCookieLoginRsp.hasInt32Uid;
}
- (SInt32) int32Uid {
  return resultCookieLoginRsp.int32Uid;
}
- (cookie_login_rspBuilder*) setInt32Uid:(SInt32) value {
  resultCookieLoginRsp.hasInt32Uid = YES;
  resultCookieLoginRsp.int32Uid = value;
  return self;
}
- (cookie_login_rspBuilder*) clearInt32Uid {
  resultCookieLoginRsp.hasInt32Uid = NO;
  resultCookieLoginRsp.int32Uid = 0;
  return self;
}
- (BOOL) hasInt32CookieLoginResultCode {
  return resultCookieLoginRsp.hasInt32CookieLoginResultCode;
}
- (SInt32) int32CookieLoginResultCode {
  return resultCookieLoginRsp.int32CookieLoginResultCode;
}
- (cookie_login_rspBuilder*) setInt32CookieLoginResultCode:(SInt32) value {
  resultCookieLoginRsp.hasInt32CookieLoginResultCode = YES;
  resultCookieLoginRsp.int32CookieLoginResultCode = value;
  return self;
}
- (cookie_login_rspBuilder*) clearInt32CookieLoginResultCode {
  resultCookieLoginRsp.hasInt32CookieLoginResultCode = NO;
  resultCookieLoginRsp.int32CookieLoginResultCode = 0;
  return self;
}
- (BOOL) hasStrErrorMsg {
  return resultCookieLoginRsp.hasStrErrorMsg;
}
- (NSString*) strErrorMsg {
  return resultCookieLoginRsp.strErrorMsg;
}
- (cookie_login_rspBuilder*) setStrErrorMsg:(NSString*) value {
  resultCookieLoginRsp.hasStrErrorMsg = YES;
  resultCookieLoginRsp.strErrorMsg = value;
  return self;
}
- (cookie_login_rspBuilder*) clearStrErrorMsg {
  resultCookieLoginRsp.hasStrErrorMsg = NO;
  resultCookieLoginRsp.strErrorMsg = @"";
  return self;
}
- (BOOL) hasStrDstIp {
  return resultCookieLoginRsp.hasStrDstIp;
}
- (NSString*) strDstIp {
  return resultCookieLoginRsp.strDstIp;
}
- (cookie_login_rspBuilder*) setStrDstIp:(NSString*) value {
  resultCookieLoginRsp.hasStrDstIp = YES;
  resultCookieLoginRsp.strDstIp = value;
  return self;
}
- (cookie_login_rspBuilder*) clearStrDstIp {
  resultCookieLoginRsp.hasStrDstIp = NO;
  resultCookieLoginRsp.strDstIp = @"";
  return self;
}
- (BOOL) hasStrDstPort {
  return resultCookieLoginRsp.hasStrDstPort;
}
- (NSString*) strDstPort {
  return resultCookieLoginRsp.strDstPort;
}
- (cookie_login_rspBuilder*) setStrDstPort:(NSString*) value {
  resultCookieLoginRsp.hasStrDstPort = YES;
  resultCookieLoginRsp.strDstPort = value;
  return self;
}
- (cookie_login_rspBuilder*) clearStrDstPort {
  resultCookieLoginRsp.hasStrDstPort = NO;
  resultCookieLoginRsp.strDstPort = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
