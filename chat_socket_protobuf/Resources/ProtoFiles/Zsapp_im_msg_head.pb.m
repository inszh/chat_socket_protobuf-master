// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Zsapp_im_msg_head.pb.h"
// @@protoc_insertion_point(imports)

@implementation ZsappImMsgHeadRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ZsappImMsgHeadRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Head ()
@property SInt32 int32ModuleId;
@property SInt32 int32HeadType;
@property (strong) CSHead* msgCshead;
@property (strong) LoginSig* msgLoginSig;
@end

@implementation Head

- (BOOL) hasInt32ModuleId {
  return !!hasInt32ModuleId_;
}
- (void) setHasInt32ModuleId:(BOOL) _value_ {
  hasInt32ModuleId_ = !!_value_;
}
@synthesize int32ModuleId;
- (BOOL) hasInt32HeadType {
  return !!hasInt32HeadType_;
}
- (void) setHasInt32HeadType:(BOOL) _value_ {
  hasInt32HeadType_ = !!_value_;
}
@synthesize int32HeadType;
- (BOOL) hasMsgCshead {
  return !!hasMsgCshead_;
}
- (void) setHasMsgCshead:(BOOL) _value_ {
  hasMsgCshead_ = !!_value_;
}
@synthesize msgCshead;
- (BOOL) hasMsgLoginSig {
  return !!hasMsgLoginSig_;
}
- (void) setHasMsgLoginSig:(BOOL) _value_ {
  hasMsgLoginSig_ = !!_value_;
}
@synthesize msgLoginSig;
- (instancetype) init {
  if ((self = [super init])) {
    self.int32ModuleId = 0;
    self.int32HeadType = 0;
    self.msgCshead = [CSHead defaultInstance];
    self.msgLoginSig = [LoginSig defaultInstance];
  }
  return self;
}
static Head* defaultHeadInstance = nil;
+ (void) initialize {
  if (self == [Head class]) {
    defaultHeadInstance = [[Head alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultHeadInstance;
}
- (instancetype) defaultInstance {
  return defaultHeadInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInt32ModuleId) {
    [output writeInt32:1 value:self.int32ModuleId];
  }
  if (self.hasInt32HeadType) {
    [output writeInt32:2 value:self.int32HeadType];
  }
  if (self.hasMsgCshead) {
    [output writeMessage:3 value:self.msgCshead];
  }
  if (self.hasMsgLoginSig) {
    [output writeMessage:4 value:self.msgLoginSig];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInt32ModuleId) {
    size_ += computeInt32Size(1, self.int32ModuleId);
  }
  if (self.hasInt32HeadType) {
    size_ += computeInt32Size(2, self.int32HeadType);
  }
  if (self.hasMsgCshead) {
    size_ += computeMessageSize(3, self.msgCshead);
  }
  if (self.hasMsgLoginSig) {
    size_ += computeMessageSize(4, self.msgLoginSig);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Head*) parseFromData:(NSData*) data {
  return (Head*)[[[Head builder] mergeFromData:data] build];
}
+ (Head*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Head*)[[[Head builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Head*) parseFromInputStream:(NSInputStream*) input {
  return (Head*)[[[Head builder] mergeFromInputStream:input] build];
}
+ (Head*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Head*)[[[Head builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Head*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Head*)[[[Head builder] mergeFromCodedInputStream:input] build];
}
+ (Head*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Head*)[[[Head builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeadBuilder*) builder {
  return [[HeadBuilder alloc] init];
}
+ (HeadBuilder*) builderWithPrototype:(Head*) prototype {
  return [[Head builder] mergeFrom:prototype];
}
- (HeadBuilder*) builder {
  return [Head builder];
}
- (HeadBuilder*) toBuilder {
  return [Head builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInt32ModuleId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32ModuleId", [NSNumber numberWithInteger:self.int32ModuleId]];
  }
  if (self.hasInt32HeadType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32HeadType", [NSNumber numberWithInteger:self.int32HeadType]];
  }
  if (self.hasMsgCshead) {
    [output appendFormat:@"%@%@ {\n", indent, @"msgCshead"];
    [self.msgCshead writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasMsgLoginSig) {
    [output appendFormat:@"%@%@ {\n", indent, @"msgLoginSig"];
    [self.msgLoginSig writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasInt32ModuleId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32ModuleId] forKey: @"int32ModuleId"];
  }
  if (self.hasInt32HeadType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32HeadType] forKey: @"int32HeadType"];
  }
  if (self.hasMsgCshead) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.msgCshead storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"msgCshead"];
  }
  if (self.hasMsgLoginSig) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.msgLoginSig storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"msgLoginSig"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Head class]]) {
    return NO;
  }
  Head *otherMessage = other;
  return
      self.hasInt32ModuleId == otherMessage.hasInt32ModuleId &&
      (!self.hasInt32ModuleId || self.int32ModuleId == otherMessage.int32ModuleId) &&
      self.hasInt32HeadType == otherMessage.hasInt32HeadType &&
      (!self.hasInt32HeadType || self.int32HeadType == otherMessage.int32HeadType) &&
      self.hasMsgCshead == otherMessage.hasMsgCshead &&
      (!self.hasMsgCshead || [self.msgCshead isEqual:otherMessage.msgCshead]) &&
      self.hasMsgLoginSig == otherMessage.hasMsgLoginSig &&
      (!self.hasMsgLoginSig || [self.msgLoginSig isEqual:otherMessage.msgLoginSig]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasInt32ModuleId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32ModuleId] hash];
  }
  if (self.hasInt32HeadType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32HeadType] hash];
  }
  if (self.hasMsgCshead) {
    hashCode = hashCode * 31 + [self.msgCshead hash];
  }
  if (self.hasMsgLoginSig) {
    hashCode = hashCode * 31 + [self.msgLoginSig hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HeadBuilder()
@property (strong) Head* resultHead;
@end

@implementation HeadBuilder
@synthesize resultHead;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHead = [[Head alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHead;
}
- (HeadBuilder*) clear {
  self.resultHead = [[Head alloc] init];
  return self;
}
- (HeadBuilder*) clone {
  return [Head builderWithPrototype:resultHead];
}
- (Head*) defaultInstance {
  return [Head defaultInstance];
}
- (Head*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Head*) buildPartial {
  Head* returnMe = resultHead;
  self.resultHead = nil;
  return returnMe;
}
- (HeadBuilder*) mergeFrom:(Head*) other {
  if (other == [Head defaultInstance]) {
    return self;
  }
  if (other.hasInt32ModuleId) {
    [self setInt32ModuleId:other.int32ModuleId];
  }
  if (other.hasInt32HeadType) {
    [self setInt32HeadType:other.int32HeadType];
  }
  if (other.hasMsgCshead) {
    [self mergeMsgCshead:other.msgCshead];
  }
  if (other.hasMsgLoginSig) {
    [self mergeMsgLoginSig:other.msgLoginSig];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HeadBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HeadBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setInt32ModuleId:[input readInt32]];
        break;
      }
      case 16: {
        [self setInt32HeadType:[input readInt32]];
        break;
      }
      case 26: {
        CSHeadBuilder* subBuilder = [CSHead builder];
        if (self.hasMsgCshead) {
          [subBuilder mergeFrom:self.msgCshead];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMsgCshead:[subBuilder buildPartial]];
        break;
      }
      case 34: {
        LoginSigBuilder* subBuilder = [LoginSig builder];
        if (self.hasMsgLoginSig) {
          [subBuilder mergeFrom:self.msgLoginSig];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setMsgLoginSig:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasInt32ModuleId {
  return resultHead.hasInt32ModuleId;
}
- (SInt32) int32ModuleId {
  return resultHead.int32ModuleId;
}
- (HeadBuilder*) setInt32ModuleId:(SInt32) value {
  resultHead.hasInt32ModuleId = YES;
  resultHead.int32ModuleId = value;
  return self;
}
- (HeadBuilder*) clearInt32ModuleId {
  resultHead.hasInt32ModuleId = NO;
  resultHead.int32ModuleId = 0;
  return self;
}
- (BOOL) hasInt32HeadType {
  return resultHead.hasInt32HeadType;
}
- (SInt32) int32HeadType {
  return resultHead.int32HeadType;
}
- (HeadBuilder*) setInt32HeadType:(SInt32) value {
  resultHead.hasInt32HeadType = YES;
  resultHead.int32HeadType = value;
  return self;
}
- (HeadBuilder*) clearInt32HeadType {
  resultHead.hasInt32HeadType = NO;
  resultHead.int32HeadType = 0;
  return self;
}
- (BOOL) hasMsgCshead {
  return resultHead.hasMsgCshead;
}
- (CSHead*) msgCshead {
  return resultHead.msgCshead;
}
- (HeadBuilder*) setMsgCshead:(CSHead*) value {
  resultHead.hasMsgCshead = YES;
  resultHead.msgCshead = value;
  return self;
}
- (HeadBuilder*) setMsgCsheadBuilder:(CSHeadBuilder*) builderForValue {
  return [self setMsgCshead:[builderForValue build]];
}
- (HeadBuilder*) mergeMsgCshead:(CSHead*) value {
  if (resultHead.hasMsgCshead &&
      resultHead.msgCshead != [CSHead defaultInstance]) {
    resultHead.msgCshead =
      [[[CSHead builderWithPrototype:resultHead.msgCshead] mergeFrom:value] buildPartial];
  } else {
    resultHead.msgCshead = value;
  }
  resultHead.hasMsgCshead = YES;
  return self;
}
- (HeadBuilder*) clearMsgCshead {
  resultHead.hasMsgCshead = NO;
  resultHead.msgCshead = [CSHead defaultInstance];
  return self;
}
- (BOOL) hasMsgLoginSig {
  return resultHead.hasMsgLoginSig;
}
- (LoginSig*) msgLoginSig {
  return resultHead.msgLoginSig;
}
- (HeadBuilder*) setMsgLoginSig:(LoginSig*) value {
  resultHead.hasMsgLoginSig = YES;
  resultHead.msgLoginSig = value;
  return self;
}
- (HeadBuilder*) setMsgLoginSigBuilder:(LoginSigBuilder*) builderForValue {
  return [self setMsgLoginSig:[builderForValue build]];
}
- (HeadBuilder*) mergeMsgLoginSig:(LoginSig*) value {
  if (resultHead.hasMsgLoginSig &&
      resultHead.msgLoginSig != [LoginSig defaultInstance]) {
    resultHead.msgLoginSig =
      [[[LoginSig builderWithPrototype:resultHead.msgLoginSig] mergeFrom:value] buildPartial];
  } else {
    resultHead.msgLoginSig = value;
  }
  resultHead.hasMsgLoginSig = YES;
  return self;
}
- (HeadBuilder*) clearMsgLoginSig {
  resultHead.hasMsgLoginSig = NO;
  resultHead.msgLoginSig = [LoginSig defaultInstance];
  return self;
}
@end

@interface CSHead ()
@property SInt32 int32Version;
@property SInt32 int32FromUid;
@property SInt32 int32Maincmd;
@property SInt32 int32Subcmd;
@property SInt32 int32MsgSeq;
@property UInt32 uint32RetryTimes;
@property UInt32 uint32SessionId;
@property UInt32 uint32ResultCode;
@property UInt32 uint32ResultSubcode;
@property (strong) NSString* strErrorMsg;
@property (strong) NSString* clientIp;
@property UInt32 clientPort;
@property SInt32 int32ToUid;
@property (strong) NSString* strPhoneNum;
@property (strong) NSString* strOsVersion;
@end

@implementation CSHead

- (BOOL) hasInt32Version {
  return !!hasInt32Version_;
}
- (void) setHasInt32Version:(BOOL) _value_ {
  hasInt32Version_ = !!_value_;
}
@synthesize int32Version;
- (BOOL) hasInt32FromUid {
  return !!hasInt32FromUid_;
}
- (void) setHasInt32FromUid:(BOOL) _value_ {
  hasInt32FromUid_ = !!_value_;
}
@synthesize int32FromUid;
- (BOOL) hasInt32Maincmd {
  return !!hasInt32Maincmd_;
}
- (void) setHasInt32Maincmd:(BOOL) _value_ {
  hasInt32Maincmd_ = !!_value_;
}
@synthesize int32Maincmd;
- (BOOL) hasInt32Subcmd {
  return !!hasInt32Subcmd_;
}
- (void) setHasInt32Subcmd:(BOOL) _value_ {
  hasInt32Subcmd_ = !!_value_;
}
@synthesize int32Subcmd;
- (BOOL) hasInt32MsgSeq {
  return !!hasInt32MsgSeq_;
}
- (void) setHasInt32MsgSeq:(BOOL) _value_ {
  hasInt32MsgSeq_ = !!_value_;
}
@synthesize int32MsgSeq;
- (BOOL) hasUint32RetryTimes {
  return !!hasUint32RetryTimes_;
}
- (void) setHasUint32RetryTimes:(BOOL) _value_ {
  hasUint32RetryTimes_ = !!_value_;
}
@synthesize uint32RetryTimes;
- (BOOL) hasUint32SessionId {
  return !!hasUint32SessionId_;
}
- (void) setHasUint32SessionId:(BOOL) _value_ {
  hasUint32SessionId_ = !!_value_;
}
@synthesize uint32SessionId;
- (BOOL) hasUint32ResultCode {
  return !!hasUint32ResultCode_;
}
- (void) setHasUint32ResultCode:(BOOL) _value_ {
  hasUint32ResultCode_ = !!_value_;
}
@synthesize uint32ResultCode;
- (BOOL) hasUint32ResultSubcode {
  return !!hasUint32ResultSubcode_;
}
- (void) setHasUint32ResultSubcode:(BOOL) _value_ {
  hasUint32ResultSubcode_ = !!_value_;
}
@synthesize uint32ResultSubcode;
- (BOOL) hasStrErrorMsg {
  return !!hasStrErrorMsg_;
}
- (void) setHasStrErrorMsg:(BOOL) _value_ {
  hasStrErrorMsg_ = !!_value_;
}
@synthesize strErrorMsg;
- (BOOL) hasClientIp {
  return !!hasClientIp_;
}
- (void) setHasClientIp:(BOOL) _value_ {
  hasClientIp_ = !!_value_;
}
@synthesize clientIp;
- (BOOL) hasClientPort {
  return !!hasClientPort_;
}
- (void) setHasClientPort:(BOOL) _value_ {
  hasClientPort_ = !!_value_;
}
@synthesize clientPort;
- (BOOL) hasInt32ToUid {
  return !!hasInt32ToUid_;
}
- (void) setHasInt32ToUid:(BOOL) _value_ {
  hasInt32ToUid_ = !!_value_;
}
@synthesize int32ToUid;
- (BOOL) hasStrPhoneNum {
  return !!hasStrPhoneNum_;
}
- (void) setHasStrPhoneNum:(BOOL) _value_ {
  hasStrPhoneNum_ = !!_value_;
}
@synthesize strPhoneNum;
- (BOOL) hasStrOsVersion {
  return !!hasStrOsVersion_;
}
- (void) setHasStrOsVersion:(BOOL) _value_ {
  hasStrOsVersion_ = !!_value_;
}
@synthesize strOsVersion;
- (instancetype) init {
  if ((self = [super init])) {
    self.int32Version = 0;
    self.int32FromUid = 0;
    self.int32Maincmd = 0;
    self.int32Subcmd = 0;
    self.int32MsgSeq = 0;
    self.uint32RetryTimes = 0;
    self.uint32SessionId = 0;
    self.uint32ResultCode = 0;
    self.uint32ResultSubcode = 0;
    self.strErrorMsg = @"";
    self.clientIp = @"";
    self.clientPort = 0;
    self.int32ToUid = 0;
    self.strPhoneNum = @"";
    self.strOsVersion = @"";
  }
  return self;
}
static CSHead* defaultCSHeadInstance = nil;
+ (void) initialize {
  if (self == [CSHead class]) {
    defaultCSHeadInstance = [[CSHead alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultCSHeadInstance;
}
- (instancetype) defaultInstance {
  return defaultCSHeadInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInt32Version) {
    [output writeInt32:1 value:self.int32Version];
  }
  if (self.hasInt32FromUid) {
    [output writeInt32:2 value:self.int32FromUid];
  }
  if (self.hasInt32Maincmd) {
    [output writeInt32:3 value:self.int32Maincmd];
  }
  if (self.hasInt32Subcmd) {
    [output writeInt32:4 value:self.int32Subcmd];
  }
  if (self.hasInt32MsgSeq) {
    [output writeInt32:5 value:self.int32MsgSeq];
  }
  if (self.hasUint32RetryTimes) {
    [output writeUInt32:6 value:self.uint32RetryTimes];
  }
  if (self.hasUint32SessionId) {
    [output writeUInt32:7 value:self.uint32SessionId];
  }
  if (self.hasUint32ResultCode) {
    [output writeUInt32:8 value:self.uint32ResultCode];
  }
  if (self.hasUint32ResultSubcode) {
    [output writeUInt32:9 value:self.uint32ResultSubcode];
  }
  if (self.hasStrErrorMsg) {
    [output writeString:10 value:self.strErrorMsg];
  }
  if (self.hasClientIp) {
    [output writeString:11 value:self.clientIp];
  }
  if (self.hasClientPort) {
    [output writeUInt32:12 value:self.clientPort];
  }
  if (self.hasInt32ToUid) {
    [output writeInt32:13 value:self.int32ToUid];
  }
  if (self.hasStrPhoneNum) {
    [output writeString:14 value:self.strPhoneNum];
  }
  if (self.hasStrOsVersion) {
    [output writeString:15 value:self.strOsVersion];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInt32Version) {
    size_ += computeInt32Size(1, self.int32Version);
  }
  if (self.hasInt32FromUid) {
    size_ += computeInt32Size(2, self.int32FromUid);
  }
  if (self.hasInt32Maincmd) {
    size_ += computeInt32Size(3, self.int32Maincmd);
  }
  if (self.hasInt32Subcmd) {
    size_ += computeInt32Size(4, self.int32Subcmd);
  }
  if (self.hasInt32MsgSeq) {
    size_ += computeInt32Size(5, self.int32MsgSeq);
  }
  if (self.hasUint32RetryTimes) {
    size_ += computeUInt32Size(6, self.uint32RetryTimes);
  }
  if (self.hasUint32SessionId) {
    size_ += computeUInt32Size(7, self.uint32SessionId);
  }
  if (self.hasUint32ResultCode) {
    size_ += computeUInt32Size(8, self.uint32ResultCode);
  }
  if (self.hasUint32ResultSubcode) {
    size_ += computeUInt32Size(9, self.uint32ResultSubcode);
  }
  if (self.hasStrErrorMsg) {
    size_ += computeStringSize(10, self.strErrorMsg);
  }
  if (self.hasClientIp) {
    size_ += computeStringSize(11, self.clientIp);
  }
  if (self.hasClientPort) {
    size_ += computeUInt32Size(12, self.clientPort);
  }
  if (self.hasInt32ToUid) {
    size_ += computeInt32Size(13, self.int32ToUid);
  }
  if (self.hasStrPhoneNum) {
    size_ += computeStringSize(14, self.strPhoneNum);
  }
  if (self.hasStrOsVersion) {
    size_ += computeStringSize(15, self.strOsVersion);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (CSHead*) parseFromData:(NSData*) data {
  return (CSHead*)[[[CSHead builder] mergeFromData:data] build];
}
+ (CSHead*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSHead*)[[[CSHead builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (CSHead*) parseFromInputStream:(NSInputStream*) input {
  return (CSHead*)[[[CSHead builder] mergeFromInputStream:input] build];
}
+ (CSHead*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSHead*)[[[CSHead builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSHead*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (CSHead*)[[[CSHead builder] mergeFromCodedInputStream:input] build];
}
+ (CSHead*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (CSHead*)[[[CSHead builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (CSHeadBuilder*) builder {
  return [[CSHeadBuilder alloc] init];
}
+ (CSHeadBuilder*) builderWithPrototype:(CSHead*) prototype {
  return [[CSHead builder] mergeFrom:prototype];
}
- (CSHeadBuilder*) builder {
  return [CSHead builder];
}
- (CSHeadBuilder*) toBuilder {
  return [CSHead builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInt32Version) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32Version", [NSNumber numberWithInteger:self.int32Version]];
  }
  if (self.hasInt32FromUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32FromUid", [NSNumber numberWithInteger:self.int32FromUid]];
  }
  if (self.hasInt32Maincmd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32Maincmd", [NSNumber numberWithInteger:self.int32Maincmd]];
  }
  if (self.hasInt32Subcmd) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32Subcmd", [NSNumber numberWithInteger:self.int32Subcmd]];
  }
  if (self.hasInt32MsgSeq) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32MsgSeq", [NSNumber numberWithInteger:self.int32MsgSeq]];
  }
  if (self.hasUint32RetryTimes) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uint32RetryTimes", [NSNumber numberWithInteger:self.uint32RetryTimes]];
  }
  if (self.hasUint32SessionId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uint32SessionId", [NSNumber numberWithInteger:self.uint32SessionId]];
  }
  if (self.hasUint32ResultCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uint32ResultCode", [NSNumber numberWithInteger:self.uint32ResultCode]];
  }
  if (self.hasUint32ResultSubcode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uint32ResultSubcode", [NSNumber numberWithInteger:self.uint32ResultSubcode]];
  }
  if (self.hasStrErrorMsg) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strErrorMsg", self.strErrorMsg];
  }
  if (self.hasClientIp) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientIp", self.clientIp];
  }
  if (self.hasClientPort) {
    [output appendFormat:@"%@%@: %@\n", indent, @"clientPort", [NSNumber numberWithInteger:self.clientPort]];
  }
  if (self.hasInt32ToUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32ToUid", [NSNumber numberWithInteger:self.int32ToUid]];
  }
  if (self.hasStrPhoneNum) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strPhoneNum", self.strPhoneNum];
  }
  if (self.hasStrOsVersion) {
    [output appendFormat:@"%@%@: %@\n", indent, @"strOsVersion", self.strOsVersion];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasInt32Version) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32Version] forKey: @"int32Version"];
  }
  if (self.hasInt32FromUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32FromUid] forKey: @"int32FromUid"];
  }
  if (self.hasInt32Maincmd) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32Maincmd] forKey: @"int32Maincmd"];
  }
  if (self.hasInt32Subcmd) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32Subcmd] forKey: @"int32Subcmd"];
  }
  if (self.hasInt32MsgSeq) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32MsgSeq] forKey: @"int32MsgSeq"];
  }
  if (self.hasUint32RetryTimes) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uint32RetryTimes] forKey: @"uint32RetryTimes"];
  }
  if (self.hasUint32SessionId) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uint32SessionId] forKey: @"uint32SessionId"];
  }
  if (self.hasUint32ResultCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uint32ResultCode] forKey: @"uint32ResultCode"];
  }
  if (self.hasUint32ResultSubcode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.uint32ResultSubcode] forKey: @"uint32ResultSubcode"];
  }
  if (self.hasStrErrorMsg) {
    [dictionary setObject: self.strErrorMsg forKey: @"strErrorMsg"];
  }
  if (self.hasClientIp) {
    [dictionary setObject: self.clientIp forKey: @"clientIp"];
  }
  if (self.hasClientPort) {
    [dictionary setObject: [NSNumber numberWithInteger:self.clientPort] forKey: @"clientPort"];
  }
  if (self.hasInt32ToUid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32ToUid] forKey: @"int32ToUid"];
  }
  if (self.hasStrPhoneNum) {
    [dictionary setObject: self.strPhoneNum forKey: @"strPhoneNum"];
  }
  if (self.hasStrOsVersion) {
    [dictionary setObject: self.strOsVersion forKey: @"strOsVersion"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[CSHead class]]) {
    return NO;
  }
  CSHead *otherMessage = other;
  return
      self.hasInt32Version == otherMessage.hasInt32Version &&
      (!self.hasInt32Version || self.int32Version == otherMessage.int32Version) &&
      self.hasInt32FromUid == otherMessage.hasInt32FromUid &&
      (!self.hasInt32FromUid || self.int32FromUid == otherMessage.int32FromUid) &&
      self.hasInt32Maincmd == otherMessage.hasInt32Maincmd &&
      (!self.hasInt32Maincmd || self.int32Maincmd == otherMessage.int32Maincmd) &&
      self.hasInt32Subcmd == otherMessage.hasInt32Subcmd &&
      (!self.hasInt32Subcmd || self.int32Subcmd == otherMessage.int32Subcmd) &&
      self.hasInt32MsgSeq == otherMessage.hasInt32MsgSeq &&
      (!self.hasInt32MsgSeq || self.int32MsgSeq == otherMessage.int32MsgSeq) &&
      self.hasUint32RetryTimes == otherMessage.hasUint32RetryTimes &&
      (!self.hasUint32RetryTimes || self.uint32RetryTimes == otherMessage.uint32RetryTimes) &&
      self.hasUint32SessionId == otherMessage.hasUint32SessionId &&
      (!self.hasUint32SessionId || self.uint32SessionId == otherMessage.uint32SessionId) &&
      self.hasUint32ResultCode == otherMessage.hasUint32ResultCode &&
      (!self.hasUint32ResultCode || self.uint32ResultCode == otherMessage.uint32ResultCode) &&
      self.hasUint32ResultSubcode == otherMessage.hasUint32ResultSubcode &&
      (!self.hasUint32ResultSubcode || self.uint32ResultSubcode == otherMessage.uint32ResultSubcode) &&
      self.hasStrErrorMsg == otherMessage.hasStrErrorMsg &&
      (!self.hasStrErrorMsg || [self.strErrorMsg isEqual:otherMessage.strErrorMsg]) &&
      self.hasClientIp == otherMessage.hasClientIp &&
      (!self.hasClientIp || [self.clientIp isEqual:otherMessage.clientIp]) &&
      self.hasClientPort == otherMessage.hasClientPort &&
      (!self.hasClientPort || self.clientPort == otherMessage.clientPort) &&
      self.hasInt32ToUid == otherMessage.hasInt32ToUid &&
      (!self.hasInt32ToUid || self.int32ToUid == otherMessage.int32ToUid) &&
      self.hasStrPhoneNum == otherMessage.hasStrPhoneNum &&
      (!self.hasStrPhoneNum || [self.strPhoneNum isEqual:otherMessage.strPhoneNum]) &&
      self.hasStrOsVersion == otherMessage.hasStrOsVersion &&
      (!self.hasStrOsVersion || [self.strOsVersion isEqual:otherMessage.strOsVersion]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasInt32Version) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32Version] hash];
  }
  if (self.hasInt32FromUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32FromUid] hash];
  }
  if (self.hasInt32Maincmd) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32Maincmd] hash];
  }
  if (self.hasInt32Subcmd) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32Subcmd] hash];
  }
  if (self.hasInt32MsgSeq) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32MsgSeq] hash];
  }
  if (self.hasUint32RetryTimes) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uint32RetryTimes] hash];
  }
  if (self.hasUint32SessionId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uint32SessionId] hash];
  }
  if (self.hasUint32ResultCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uint32ResultCode] hash];
  }
  if (self.hasUint32ResultSubcode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.uint32ResultSubcode] hash];
  }
  if (self.hasStrErrorMsg) {
    hashCode = hashCode * 31 + [self.strErrorMsg hash];
  }
  if (self.hasClientIp) {
    hashCode = hashCode * 31 + [self.clientIp hash];
  }
  if (self.hasClientPort) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.clientPort] hash];
  }
  if (self.hasInt32ToUid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32ToUid] hash];
  }
  if (self.hasStrPhoneNum) {
    hashCode = hashCode * 31 + [self.strPhoneNum hash];
  }
  if (self.hasStrOsVersion) {
    hashCode = hashCode * 31 + [self.strOsVersion hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface CSHeadBuilder()
@property (strong) CSHead* resultCshead;
@end

@implementation CSHeadBuilder
@synthesize resultCshead;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultCshead = [[CSHead alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultCshead;
}
- (CSHeadBuilder*) clear {
  self.resultCshead = [[CSHead alloc] init];
  return self;
}
- (CSHeadBuilder*) clone {
  return [CSHead builderWithPrototype:resultCshead];
}
- (CSHead*) defaultInstance {
  return [CSHead defaultInstance];
}
- (CSHead*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (CSHead*) buildPartial {
  CSHead* returnMe = resultCshead;
  self.resultCshead = nil;
  return returnMe;
}
- (CSHeadBuilder*) mergeFrom:(CSHead*) other {
  if (other == [CSHead defaultInstance]) {
    return self;
  }
  if (other.hasInt32Version) {
    [self setInt32Version:other.int32Version];
  }
  if (other.hasInt32FromUid) {
    [self setInt32FromUid:other.int32FromUid];
  }
  if (other.hasInt32Maincmd) {
    [self setInt32Maincmd:other.int32Maincmd];
  }
  if (other.hasInt32Subcmd) {
    [self setInt32Subcmd:other.int32Subcmd];
  }
  if (other.hasInt32MsgSeq) {
    [self setInt32MsgSeq:other.int32MsgSeq];
  }
  if (other.hasUint32RetryTimes) {
    [self setUint32RetryTimes:other.uint32RetryTimes];
  }
  if (other.hasUint32SessionId) {
    [self setUint32SessionId:other.uint32SessionId];
  }
  if (other.hasUint32ResultCode) {
    [self setUint32ResultCode:other.uint32ResultCode];
  }
  if (other.hasUint32ResultSubcode) {
    [self setUint32ResultSubcode:other.uint32ResultSubcode];
  }
  if (other.hasStrErrorMsg) {
    [self setStrErrorMsg:other.strErrorMsg];
  }
  if (other.hasClientIp) {
    [self setClientIp:other.clientIp];
  }
  if (other.hasClientPort) {
    [self setClientPort:other.clientPort];
  }
  if (other.hasInt32ToUid) {
    [self setInt32ToUid:other.int32ToUid];
  }
  if (other.hasStrPhoneNum) {
    [self setStrPhoneNum:other.strPhoneNum];
  }
  if (other.hasStrOsVersion) {
    [self setStrOsVersion:other.strOsVersion];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (CSHeadBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (CSHeadBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setInt32Version:[input readInt32]];
        break;
      }
      case 16: {
        [self setInt32FromUid:[input readInt32]];
        break;
      }
      case 24: {
        [self setInt32Maincmd:[input readInt32]];
        break;
      }
      case 32: {
        [self setInt32Subcmd:[input readInt32]];
        break;
      }
      case 40: {
        [self setInt32MsgSeq:[input readInt32]];
        break;
      }
      case 48: {
        [self setUint32RetryTimes:[input readUInt32]];
        break;
      }
      case 56: {
        [self setUint32SessionId:[input readUInt32]];
        break;
      }
      case 64: {
        [self setUint32ResultCode:[input readUInt32]];
        break;
      }
      case 72: {
        [self setUint32ResultSubcode:[input readUInt32]];
        break;
      }
      case 82: {
        [self setStrErrorMsg:[input readString]];
        break;
      }
      case 90: {
        [self setClientIp:[input readString]];
        break;
      }
      case 96: {
        [self setClientPort:[input readUInt32]];
        break;
      }
      case 104: {
        [self setInt32ToUid:[input readInt32]];
        break;
      }
      case 114: {
        [self setStrPhoneNum:[input readString]];
        break;
      }
      case 122: {
        [self setStrOsVersion:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasInt32Version {
  return resultCshead.hasInt32Version;
}
- (SInt32) int32Version {
  return resultCshead.int32Version;
}
- (CSHeadBuilder*) setInt32Version:(SInt32) value {
  resultCshead.hasInt32Version = YES;
  resultCshead.int32Version = value;
  return self;
}
- (CSHeadBuilder*) clearInt32Version {
  resultCshead.hasInt32Version = NO;
  resultCshead.int32Version = 0;
  return self;
}
- (BOOL) hasInt32FromUid {
  return resultCshead.hasInt32FromUid;
}
- (SInt32) int32FromUid {
  return resultCshead.int32FromUid;
}
- (CSHeadBuilder*) setInt32FromUid:(SInt32) value {
  resultCshead.hasInt32FromUid = YES;
  resultCshead.int32FromUid = value;
  return self;
}
- (CSHeadBuilder*) clearInt32FromUid {
  resultCshead.hasInt32FromUid = NO;
  resultCshead.int32FromUid = 0;
  return self;
}
- (BOOL) hasInt32Maincmd {
  return resultCshead.hasInt32Maincmd;
}
- (SInt32) int32Maincmd {
  return resultCshead.int32Maincmd;
}
- (CSHeadBuilder*) setInt32Maincmd:(SInt32) value {
  resultCshead.hasInt32Maincmd = YES;
  resultCshead.int32Maincmd = value;
  return self;
}
- (CSHeadBuilder*) clearInt32Maincmd {
  resultCshead.hasInt32Maincmd = NO;
  resultCshead.int32Maincmd = 0;
  return self;
}
- (BOOL) hasInt32Subcmd {
  return resultCshead.hasInt32Subcmd;
}
- (SInt32) int32Subcmd {
  return resultCshead.int32Subcmd;
}
- (CSHeadBuilder*) setInt32Subcmd:(SInt32) value {
  resultCshead.hasInt32Subcmd = YES;
  resultCshead.int32Subcmd = value;
  return self;
}
- (CSHeadBuilder*) clearInt32Subcmd {
  resultCshead.hasInt32Subcmd = NO;
  resultCshead.int32Subcmd = 0;
  return self;
}
- (BOOL) hasInt32MsgSeq {
  return resultCshead.hasInt32MsgSeq;
}
- (SInt32) int32MsgSeq {
  return resultCshead.int32MsgSeq;
}
- (CSHeadBuilder*) setInt32MsgSeq:(SInt32) value {
  resultCshead.hasInt32MsgSeq = YES;
  resultCshead.int32MsgSeq = value;
  return self;
}
- (CSHeadBuilder*) clearInt32MsgSeq {
  resultCshead.hasInt32MsgSeq = NO;
  resultCshead.int32MsgSeq = 0;
  return self;
}
- (BOOL) hasUint32RetryTimes {
  return resultCshead.hasUint32RetryTimes;
}
- (UInt32) uint32RetryTimes {
  return resultCshead.uint32RetryTimes;
}
- (CSHeadBuilder*) setUint32RetryTimes:(UInt32) value {
  resultCshead.hasUint32RetryTimes = YES;
  resultCshead.uint32RetryTimes = value;
  return self;
}
- (CSHeadBuilder*) clearUint32RetryTimes {
  resultCshead.hasUint32RetryTimes = NO;
  resultCshead.uint32RetryTimes = 0;
  return self;
}
- (BOOL) hasUint32SessionId {
  return resultCshead.hasUint32SessionId;
}
- (UInt32) uint32SessionId {
  return resultCshead.uint32SessionId;
}
- (CSHeadBuilder*) setUint32SessionId:(UInt32) value {
  resultCshead.hasUint32SessionId = YES;
  resultCshead.uint32SessionId = value;
  return self;
}
- (CSHeadBuilder*) clearUint32SessionId {
  resultCshead.hasUint32SessionId = NO;
  resultCshead.uint32SessionId = 0;
  return self;
}
- (BOOL) hasUint32ResultCode {
  return resultCshead.hasUint32ResultCode;
}
- (UInt32) uint32ResultCode {
  return resultCshead.uint32ResultCode;
}
- (CSHeadBuilder*) setUint32ResultCode:(UInt32) value {
  resultCshead.hasUint32ResultCode = YES;
  resultCshead.uint32ResultCode = value;
  return self;
}
- (CSHeadBuilder*) clearUint32ResultCode {
  resultCshead.hasUint32ResultCode = NO;
  resultCshead.uint32ResultCode = 0;
  return self;
}
- (BOOL) hasUint32ResultSubcode {
  return resultCshead.hasUint32ResultSubcode;
}
- (UInt32) uint32ResultSubcode {
  return resultCshead.uint32ResultSubcode;
}
- (CSHeadBuilder*) setUint32ResultSubcode:(UInt32) value {
  resultCshead.hasUint32ResultSubcode = YES;
  resultCshead.uint32ResultSubcode = value;
  return self;
}
- (CSHeadBuilder*) clearUint32ResultSubcode {
  resultCshead.hasUint32ResultSubcode = NO;
  resultCshead.uint32ResultSubcode = 0;
  return self;
}
- (BOOL) hasStrErrorMsg {
  return resultCshead.hasStrErrorMsg;
}
- (NSString*) strErrorMsg {
  return resultCshead.strErrorMsg;
}
- (CSHeadBuilder*) setStrErrorMsg:(NSString*) value {
  resultCshead.hasStrErrorMsg = YES;
  resultCshead.strErrorMsg = value;
  return self;
}
- (CSHeadBuilder*) clearStrErrorMsg {
  resultCshead.hasStrErrorMsg = NO;
  resultCshead.strErrorMsg = @"";
  return self;
}
- (BOOL) hasClientIp {
  return resultCshead.hasClientIp;
}
- (NSString*) clientIp {
  return resultCshead.clientIp;
}
- (CSHeadBuilder*) setClientIp:(NSString*) value {
  resultCshead.hasClientIp = YES;
  resultCshead.clientIp = value;
  return self;
}
- (CSHeadBuilder*) clearClientIp {
  resultCshead.hasClientIp = NO;
  resultCshead.clientIp = @"";
  return self;
}
- (BOOL) hasClientPort {
  return resultCshead.hasClientPort;
}
- (UInt32) clientPort {
  return resultCshead.clientPort;
}
- (CSHeadBuilder*) setClientPort:(UInt32) value {
  resultCshead.hasClientPort = YES;
  resultCshead.clientPort = value;
  return self;
}
- (CSHeadBuilder*) clearClientPort {
  resultCshead.hasClientPort = NO;
  resultCshead.clientPort = 0;
  return self;
}
- (BOOL) hasInt32ToUid {
  return resultCshead.hasInt32ToUid;
}
- (SInt32) int32ToUid {
  return resultCshead.int32ToUid;
}
- (CSHeadBuilder*) setInt32ToUid:(SInt32) value {
  resultCshead.hasInt32ToUid = YES;
  resultCshead.int32ToUid = value;
  return self;
}
- (CSHeadBuilder*) clearInt32ToUid {
  resultCshead.hasInt32ToUid = NO;
  resultCshead.int32ToUid = 0;
  return self;
}
- (BOOL) hasStrPhoneNum {
  return resultCshead.hasStrPhoneNum;
}
- (NSString*) strPhoneNum {
  return resultCshead.strPhoneNum;
}
- (CSHeadBuilder*) setStrPhoneNum:(NSString*) value {
  resultCshead.hasStrPhoneNum = YES;
  resultCshead.strPhoneNum = value;
  return self;
}
- (CSHeadBuilder*) clearStrPhoneNum {
  resultCshead.hasStrPhoneNum = NO;
  resultCshead.strPhoneNum = @"";
  return self;
}
- (BOOL) hasStrOsVersion {
  return resultCshead.hasStrOsVersion;
}
- (NSString*) strOsVersion {
  return resultCshead.strOsVersion;
}
- (CSHeadBuilder*) setStrOsVersion:(NSString*) value {
  resultCshead.hasStrOsVersion = YES;
  resultCshead.strOsVersion = value;
  return self;
}
- (CSHeadBuilder*) clearStrOsVersion {
  resultCshead.hasStrOsVersion = NO;
  resultCshead.strOsVersion = @"";
  return self;
}
@end

@interface LoginSig ()
@property SInt32 int32SigType;
@property (strong) NSData* bytesSig;
@end

@implementation LoginSig

- (BOOL) hasInt32SigType {
  return !!hasInt32SigType_;
}
- (void) setHasInt32SigType:(BOOL) _value_ {
  hasInt32SigType_ = !!_value_;
}
@synthesize int32SigType;
- (BOOL) hasBytesSig {
  return !!hasBytesSig_;
}
- (void) setHasBytesSig:(BOOL) _value_ {
  hasBytesSig_ = !!_value_;
}
@synthesize bytesSig;
- (instancetype) init {
  if ((self = [super init])) {
    self.int32SigType = 0;
    self.bytesSig = [NSData data];
  }
  return self;
}
static LoginSig* defaultLoginSigInstance = nil;
+ (void) initialize {
  if (self == [LoginSig class]) {
    defaultLoginSigInstance = [[LoginSig alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultLoginSigInstance;
}
- (instancetype) defaultInstance {
  return defaultLoginSigInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasInt32SigType) {
    [output writeInt32:1 value:self.int32SigType];
  }
  if (self.hasBytesSig) {
    [output writeData:2 value:self.bytesSig];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasInt32SigType) {
    size_ += computeInt32Size(1, self.int32SigType);
  }
  if (self.hasBytesSig) {
    size_ += computeDataSize(2, self.bytesSig);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (LoginSig*) parseFromData:(NSData*) data {
  return (LoginSig*)[[[LoginSig builder] mergeFromData:data] build];
}
+ (LoginSig*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginSig*)[[[LoginSig builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (LoginSig*) parseFromInputStream:(NSInputStream*) input {
  return (LoginSig*)[[[LoginSig builder] mergeFromInputStream:input] build];
}
+ (LoginSig*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginSig*)[[[LoginSig builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginSig*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (LoginSig*)[[[LoginSig builder] mergeFromCodedInputStream:input] build];
}
+ (LoginSig*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (LoginSig*)[[[LoginSig builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (LoginSigBuilder*) builder {
  return [[LoginSigBuilder alloc] init];
}
+ (LoginSigBuilder*) builderWithPrototype:(LoginSig*) prototype {
  return [[LoginSig builder] mergeFrom:prototype];
}
- (LoginSigBuilder*) builder {
  return [LoginSig builder];
}
- (LoginSigBuilder*) toBuilder {
  return [LoginSig builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasInt32SigType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"int32SigType", [NSNumber numberWithInteger:self.int32SigType]];
  }
  if (self.hasBytesSig) {
    [output appendFormat:@"%@%@: %@\n", indent, @"bytesSig", self.bytesSig];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasInt32SigType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.int32SigType] forKey: @"int32SigType"];
  }
  if (self.hasBytesSig) {
    [dictionary setObject: self.bytesSig forKey: @"bytesSig"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[LoginSig class]]) {
    return NO;
  }
  LoginSig *otherMessage = other;
  return
      self.hasInt32SigType == otherMessage.hasInt32SigType &&
      (!self.hasInt32SigType || self.int32SigType == otherMessage.int32SigType) &&
      self.hasBytesSig == otherMessage.hasBytesSig &&
      (!self.hasBytesSig || [self.bytesSig isEqual:otherMessage.bytesSig]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasInt32SigType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.int32SigType] hash];
  }
  if (self.hasBytesSig) {
    hashCode = hashCode * 31 + [self.bytesSig hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface LoginSigBuilder()
@property (strong) LoginSig* resultLoginSig;
@end

@implementation LoginSigBuilder
@synthesize resultLoginSig;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLoginSig = [[LoginSig alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLoginSig;
}
- (LoginSigBuilder*) clear {
  self.resultLoginSig = [[LoginSig alloc] init];
  return self;
}
- (LoginSigBuilder*) clone {
  return [LoginSig builderWithPrototype:resultLoginSig];
}
- (LoginSig*) defaultInstance {
  return [LoginSig defaultInstance];
}
- (LoginSig*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (LoginSig*) buildPartial {
  LoginSig* returnMe = resultLoginSig;
  self.resultLoginSig = nil;
  return returnMe;
}
- (LoginSigBuilder*) mergeFrom:(LoginSig*) other {
  if (other == [LoginSig defaultInstance]) {
    return self;
  }
  if (other.hasInt32SigType) {
    [self setInt32SigType:other.int32SigType];
  }
  if (other.hasBytesSig) {
    [self setBytesSig:other.bytesSig];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (LoginSigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (LoginSigBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setInt32SigType:[input readInt32]];
        break;
      }
      case 18: {
        [self setBytesSig:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasInt32SigType {
  return resultLoginSig.hasInt32SigType;
}
- (SInt32) int32SigType {
  return resultLoginSig.int32SigType;
}
- (LoginSigBuilder*) setInt32SigType:(SInt32) value {
  resultLoginSig.hasInt32SigType = YES;
  resultLoginSig.int32SigType = value;
  return self;
}
- (LoginSigBuilder*) clearInt32SigType {
  resultLoginSig.hasInt32SigType = NO;
  resultLoginSig.int32SigType = 0;
  return self;
}
- (BOOL) hasBytesSig {
  return resultLoginSig.hasBytesSig;
}
- (NSData*) bytesSig {
  return resultLoginSig.bytesSig;
}
- (LoginSigBuilder*) setBytesSig:(NSData*) value {
  resultLoginSig.hasBytesSig = YES;
  resultLoginSig.bytesSig = value;
  return self;
}
- (LoginSigBuilder*) clearBytesSig {
  resultLoginSig.hasBytesSig = NO;
  resultLoginSig.bytesSig = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
